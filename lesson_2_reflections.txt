Reflections:

What happens when you initialize a repository? Why do you need to do it?
$ git init initializes an empty git repository for that folder.
$ git status displays all untracked files and files to be committed in the working directory & created staging area.

How is the staging area different from the working directory and the repository? What value do you think it offers?
Staging area tracks all the files to be committed.

How can you use the staging area to make sure you have one commit per logical change?
Add only changes related one logical change to the staging area and commit that to repository with a meaningful comment for that logical change.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
(1) Working on experimental features (2) working on different language version.
Branches would help in maintaining different versions of the application and facilitate parallel development. 

How do the diagrams help you visualize the branch structure?
Diagrams display the order of commits with meaningful commit messages and helo visualize the sequence of changes happened.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Changes in two branches were merged and commits are ordered by timestamp. Diagrams represents the change history.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Automatic Merging: 

Pros:
Unrelated changes are auto-merged
Saves time and effort

Cons:
Logical errors can be introduced

Always doing merges manually:
Pros:
Code is validated and tested by a human, so more quality of code and less errors
Cons:
Practically not possible to merge all changes manually