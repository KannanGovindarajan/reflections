When would you want to use a remote repository rather than keeping all your work local?
1) To collaborate with other users
2) To have access code files from all computers
3) Keep code files backuped up in GitHub (remote computer) 

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
If Git automatically pulls changes from remote repository, it might keep changing working copy of files and disturb your current work.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
Forks: Creates a copy of repository of other developers in GitHub, so that we can track the origin of work.
Clones: Creating a copy of local repository or copy of own repository in GitHub.
Branches: Branch code in local repository to work on future releases, and parallel releases.

What is the benefit of having a copy of the last known state of the remote stored locally?
Is to compare last known state of remote stored locally with state of remote copy
- performs fast-forward merges if local changes added after last known state of remote stored locally is ancestor of changes made in remote copy
- otherwise signals auto-merge conflict and make the user to manually merge and push the changes to remote.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
We can keep the files in the cloud drive or email and collaborate with others.
Easy: no or less learning curve to work on cloud drive or emails
Hard: (1) Tracking and merging changes of others (2) maintaining copies of changes 

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
(1) Working on separate branch allows us to work on future releases, POCs,  parallel releases without disturbing the current production version.
(2) You could make your changes directly to the master branch in your fork, but when contributing to a public repository, itâ€™s standard practice to make the changes in a non-master branch within the fork. This way, you can easily keep your master branch up-to-date with master of the original repository, and merge changes from master into your branch when you are ready.